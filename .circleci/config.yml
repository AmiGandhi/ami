version: 2 # use CircleCI 2.0
jobs:
  pr_check:
    docker: # run the steps with Docker
      - image: hashicorp/packer:1.1.1
    working_directory: ~/packer # directory where steps will run 
    steps:
      - checkout # check out source code to working directory
      - run:
          name: Validate AMI
          command: |
            packer validate \
            -var "aws_region=${AWS_REGION}" \
            -var "aws_access_key=${AWS_ACCESS_KEY_ID}" \
            -var "aws_secret_key=${AWS_SECRET_ACCESS_KEY}" \
            -var "source_ami=${SOURCE_AMI}" \
            -var "ssh_username=${SSH_USERNAME}" \
            -var "ami_users=${AMI_USERS}" \
            ubuntu-ami.json


  build_ami:
    docker: # run the steps with Docker
      - image: hashicorp/packer:1.1.1
    working_directory: ~/packer # directory where steps will run
    steps:
      - checkout # check out source code to working directory
      - run:
          name: Build AMI
          command: |
            echo $AWS_REGION
            packer build \
            -var "aws-region=${AWS_REGION}" \
            -var "aws-access_key=${AWS_ACCESS_KEY}" \
            -var "aws-secret_key=${AWS_SECRET_KEY}" \
            -var "ssh_username=${SSH_USERNAME}" \
            -var "subnet_id=${SUBNET_ID}" \
            -var "source_ami=${SOURCE_AMI}" \
            -var "ami_users=${AMI_USERS}" \
            ubuntu-ami.json
      
      - run:
          name: Install awscli
          command: sudo pip install awscli

      - run:
          name: Build Artifact
          command: |
            echo "Building the artifact with Maven"
            mvn package -Dspring.datasource.url=${DB_URL} -Dspring.datasource.username=${DB_USERNAME} -Dspring.datasource.password=${DB_PASSWORD} -DamazonProperties.bucketName=${AMAZONPROPERTIES_BUCKETNAME} -Dspring.profiles.active=${SPRING_PROFILES_ACTIVE}
            pwd
            ls -al
            ls -al build/libs
      
      - run:
          name: Zip Artifact
          command: |
            echo "Hello the current build number is ${CIRCLE_BUILD_NUM}"
            pwd
            echo "Listing current directory content"
            ls -al
            echo "Making the codedeploy_artifact directory"
            mkdir -p codedeploy_artifact
            echo "Changing directory to codedeploy_artifact"
            cd codedeploy_artifact
            echo "Zipping all files"
            zip -r csye6225-webapp-${CIRCLE_BUILD_NUM}.zip /home/circleci/webapp/target/cloud-0.0.1-SNAPSHOT.war *.sh *.yml
            pwd
            ls -al
            echo "Moving zip to the codedeploy_artifact folder"
            mv csye6225-webapp-${CIRCLE_BUILD_NUM}.zip codedeploy_artifact/
            pwd
            ls -al
            cd codedeploy_artifact
            pwd
            ls -al
            cd ..
            pwd
            ls -al
            
      - run:
          name: Upload Artifact to S3
          command: |
            echo "Uploading Artifact to S3 bucket ${AMAZONPROPERTIES_BUCKETNAME}"
            cd codedeploy_artifact
            aws s3 cp csye6225-webapp-${CIRCLE_BUILD_NUM}.zip s3://${AMAZONPROPERTIES_BUCKETNAME}
            echo "Artifact uploaded to S3 successfully"
            cd ..

      - run:
          name: Make CodeDeploy API call
          command: |
            echo "Calling CodeDeploy Agent to pick the artifact and deploy on EC2 instance"
            aws configure set region ${AWS_REGION}
            aws deploy create-deployment --application-name ${CODEDEPLOY_APPLICATION_NAME} --deployment-config-name CodeDeployDefault.OneAtATime --deployment-group-name ${CODEDEPLOY_APPLICATION_DEPLOYMENTGROUP_NAME} --s3-location bucket=${AMAZONPROPERTIES_BUCKETNAME},bundleType=zip,key=csye6225-webapp-${CIRCLE_BUILD_NUM}.zip

workflows:
  version: 2
  pr-check-workflow:
    jobs:
      - pr_check
  build-ami-workflow:
    jobs:
    - build_ami:
        filters:
            branches:
                only:
                  - master